package com.revature.dao;

import com.revature.model.User;
import com.revature.util.ConnectionUtil;

import java.io.IOException;
import java.sql.*;
import java.util.ArrayList;
import java.util.Collection;


public class UserPostgres implements Dao<User> {

    @Override
    public User get(int id) {
        User user = null;
        String sql = "SELECT * FROM user WHERE user_id = ?;";

        try (Connection c = ConnectionUtil.getConnectionFromFile()) {
            PreparedStatement ps = c.prepareStatement(sql);
            ps.setInt(1, id);

            ResultSet rs = ps.executeQuery();

            if (rs.next()) {
                User.Role role = User.Role.valueOf(rs.getString("assigned_role"));
                String username = rs.getString("username");
                String password = rs.getString("password");
                user = new User(id, username, password, role);
            }
        } catch (SQLException | IOException ex) {
            ex.printStackTrace();
        }

        return user;
    }

    public User get(String username) {
        User user = null;
        String sql = "SELECT * FROM user WHERE username = ?;";

        try (Connection c = ConnectionUtil.getConnectionFromFile()) {
            PreparedStatement ps = c.prepareStatement(sql);
            ps.setString(1, username);

            ResultSet rs = ps.executeQuery();

            if (rs.next()) {
                int id = rs.getInt("user_id");
                String password = rs.getString("password");
                User.Role role = User.Role.valueOf(rs.getString("assigned_role"));
                user = new User(id, username, password, role);
            }
        } catch (SQLException | IOException ex) {
            ex.printStackTrace();
        }

        return user;    }

    @Override
    public Collection<User> getAll() {
        Collection<User> users = new ArrayList<>();
        String sql = "SELECT * FROM user";

        try (Connection c = ConnectionUtil.getConnectionFromFile()) {
            Statement s = c.createStatement();
            ResultSet rs = s.executeQuery(sql);

            while (rs.next()) {
                int id = rs.getInt("user_id");
                String username = rs.getString("username");
                String password = rs.getString("password");
                User.Role role = User.Role.valueOf(rs.getString("assigned_role"));

                User user = new User(id, username, password, role);
                users.add(user);
            }
        } catch (SQLException | IOException ex) {
            ex.printStackTrace();
        }

        return users;
    }

    @Override
    public User save(User user) {
        String sql = "INSERT INTO "
                + "user(username, password, role) "
                + "VALUES(?, ?, ?)";

        try (Connection c = ConnectionUtil.getConnectionFromFile()) {
            PreparedStatement ps = c.prepareStatement(sql);
            ps.setString(1, user.getUsername());
            ps.setString(2, user.getPassword());
            ps.setString(3, user.getRole().toString());

            ResultSet rs = ps.executeQuery(); // return the id generated by the database
            if (rs.next()) {
                user.setId(rs.getInt("user_id"));
            }

        } catch (SQLException | IOException ex) {
            // TODO Auto-generated catch block
            ex.printStackTrace();
        }

        return user;
    }

    @Override
    public boolean update(User user) {
        String sql = "UPDATE user "
                + "SET "
                + "username = ?, "
                + "password = ?, "
                + "assigned_role = ? "
                + "WHERE "
                + "user_id = ?";

        int rowsChanged = -1;

        try (Connection c = ConnectionUtil.getConnectionFromFile()) {
            PreparedStatement ps = c.prepareStatement(sql);

            ps.setString(1, user.getUsername());
            ps.setString(2, user.getPassword());
            ps.setString(3, user.getRole().toString());
            ps.setInt(4, user.getId());

            rowsChanged = ps.executeUpdate();

        } catch (SQLException | IOException ex) {
            // TODO Auto-generated catch block
            ex.printStackTrace();
        }

        return rowsChanged >= 1;

    }

    @Override
    public boolean delete(int id) {
        String sql = "DELETE FROM user WHERE user_id = ?";

        int rowsChanged = -1;
        try (Connection c = ConnectionUtil.getConnectionFromFile()) {
            PreparedStatement ps = c.prepareStatement(sql);

            ps.setInt(1, id);

            rowsChanged = ps.executeUpdate();

        } catch (SQLException | IOException ex) {
            // TODO Auto-generated catch block
            ex.printStackTrace();
        }

        return rowsChanged >= 1;
    }
}
